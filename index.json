[{"body":"","link":"https://ryuzu2048.github.io/","section":"","tags":null,"title":""},{"body":"今日した作業 ヒューリスティック探索 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230308/","section":"daily","tags":null,"title":"2023年03月08日（水）"},{"body":"","link":"https://ryuzu2048.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://ryuzu2048.github.io/daily/","section":"daily","tags":null,"title":"Dailies"},{"body":"","link":"https://ryuzu2048.github.io/categories/%E6%97%A5%E8%A8%98/","section":"categories","tags":null,"title":"日記"},{"body":"今日した作業 ヒューリスティック探索 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230307/","section":"daily","tags":null,"title":"2023年03月07日（火）"},{"body":"今日した作業 グラフ探索 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230306/","section":"daily","tags":null,"title":"2023年03月06日（月）"},{"body":"今日した作業 Docker勉強 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230305/","section":"daily","tags":null,"title":"2023年03月05日（日）"},{"body":"使う必要が出てきたのでコマンド『chkdsk』について調べる。\n説明 Checks the file system and file system metadata of a volume for logical and physical errors. If used without parameters, chkdsk displays only the status of the volume and does not fix any errors. If used with the /f, /r, /x, or /b parameters, it fixes errors on the volume.\n--- chkdsk\n権限 the local Administrators group Membership in equivalent chkdskコマンドをPowerShell上で実行 1PS C:\\\u0026gt; chkdsk /? 2ディスクをチェックし、現在の状態を表示します。 3 4 5CHKDSK [ボリューム[[パス]ファイル名]]] [/F] [/V] [/R] [/X] [/I] [/C] [/L[:サイズ]] [/B] [/scan] [/spotfix] 6 7 8 ボリューム ドライブ文字 (文字の後にはコロンを付ける)、 9 マウント ポイント、ボリューム名を指定します。 10 filename FAT/FAT32 のみ: 断片化をチェックするファイルを 11 指定します。 12 /F ディスクのエラーを修復します。 13 /V On FAT/FAT32: ディスクの全ファイルの完全なパスと名前を表示 14 します。 15 On NTFS: クリーンアップ メッセージがあればそれも表示します。 16 /R 不良セクターを見つけて、読み取り可能な情報を回復します (/scan 17 を指定しない場合、/F も暗黙的に指定されます)。 18 /L:size NTFS のみ: 指定されたキロバイト数にログ ファイル サイズを 19 変更します。サイズが指定されていないときは、現在のサイズを 20 表示します。 21 /X 必要であれば、最初にボリュームを強制的にマウント解除します。 22 ボリュームに対して開かれているすべてのハンドルは、無効になり 23 ます (/F も暗黙的に指定されます)。 24 /I NTFS のみ: インデックス エントリのチェックを抑制して実行しま 25 す。 26 /C NTFS のみ: フォルダー構造内の周期的なチェックをスキップ 27 します。 28 /B NTFS のみ: ボリューム上の不良クラスターを再評価します (/R も 29 暗黙的に指定されます)。 30 /scan NTFS のみ: ボリュームに対してオンライン スキャンを実行します。 31 /forceofflinefix NTFS のみ: (\u0026#34;/scan\u0026#34; と共に使用する必要があります) 32 すべてのオンライン修復を無視します。検出されたすべての障害は 33 オフライン修復のためにキューに挿入されます (\u0026#34;chkdsk /spotfix\u0026#34;)。 34 /perf NTFS のみ: (\u0026#34;/scan\u0026#34; と共に使用する必要があります) 35 できる限り早くスキャンが完了するようにより多くのシステム 36 リソースを使用します。これにより、システムで実行中の他のタスク 37 のパフォーマンスが低下する可能性があります。 38 /spotfix NTFS のみ: ボリュームに対してスポット修正を実行します。 39 /sdcleanup NTFS のみ: 不要なセキュリティ記述子データを 40 ガベージ コレクトします (/F も暗黙的に指定されます)。 41 /offlinescanandfix オフライン スキャンを実行し、ボリューム上で修正します。 42 /freeorphanedchains FAT/FAT32/exFAT のみ: 孤立したクラスタ チェーンを 43 それらのコンテンツを回復する代わりに解放します。 44 /markclean FAT/FAT32/exFAT のみ: /F が指定されていない場合であっても 45 破損が検出されなかった場合、ボリュームをクリーンとしてマークします。 46 47/I または /C スイッチは、ボリュームの特定のチェックをスキップして、Chkdsk の 48実行時間を短縮します。 実行ファイルの場所 %windir%\\System32\\chkdsk.exe ログの表示方法 windows + Rキーを同時に押す。 ファイル名を指定して実行 1eventvwr.msc Windowsログ → Application → 現在のログをフィルター イベント ソースよりChkdskとWininitを選択 ボリューム（ディスク）を変更する補法 1chkdsk c: 1chkdsk d: 結論 chkdskコマンドを使う際にオプションを使用することでエラーが修正される。 主に /f、/r、/x、/bだ。\n/f ディスク上のエラーを修正します。\nディスクはロックされている必要があります。\nchkdsk がドライブをロックできない場合は、次回コンピューターを再起動する場合にドライブを確認する必要があるというメッセージが表示されます。\n/r 不良セクターを検索し、読み取り可能な情報を回復します。\nディスクはロックされている必要があります。\n/r には、物理ディスク エラーの追加分析を含む /f の機能が含まれています。\n/x 必要に応じて、最初にボリュームを強制的にマウント解除します。\nドライブに対して開いているハンドルはすべて無効になります。\n/x には、/f の機能も含まれています。\n/b NTFS と一緒にのみ使用します。\nボリューム上の不良クラスターの一覧をクリアし、割り当てられているすべてのクラスターと空きクラスターのエラーを再スキャンします。\n/b には、/r の機能が含まれています。\nボリュームを新しいハード ディスク ドライブにイメージングした後に、このパラメーターを使用します。\n参考 chkdsk ","link":"https://ryuzu2048.github.io/post/15/","section":"post","tags":null,"title":"『chkdsk』って何？"},{"body":"今日した作業 『chkdsk』って何？ ","link":"https://ryuzu2048.github.io/daily/2023/03/20230304/","section":"daily","tags":null,"title":"2023年03月04日（土）"},{"body":"","link":"https://ryuzu2048.github.io/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"https://ryuzu2048.github.io/categories/%E6%97%A5%E8%A8%98%E4%BB%A5%E5%A4%96/","section":"categories","tags":null,"title":"日記以外"},{"body":"今日した作業 データ構造の勉強 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230303/","section":"daily","tags":null,"title":"2023年03月03日（金）"},{"body":"今日した作業 動的計画法の勉強 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230302/","section":"daily","tags":null,"title":"2023年03月02日（木）"},{"body":"今日した作業 C++とPythonのコード変換作業 ","link":"https://ryuzu2048.github.io/daily/2023/03/20230301/","section":"daily","tags":null,"title":"2023年03月01日（水）"},{"body":"今日した作業 chkdskに関する内容検索 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230228/","section":"daily","tags":null,"title":"2023年02月28日（火）"},{"body":"Misskeyとは Misskeyは分散型プラットフォーム\nMisskeyはフリーかつオープンなプロジェクトで、誰でも自由にMisskeyを使ったサーバー(インスタンスと呼ばれます)を作成できるため、既に様々なインスタンスがインターネット上に公開されています。また重要な特徴として、MisskeyはActivityPubと呼ばれる分散通信プロトコルを実装しているので、どのインスタンスを選んでも他のインスタンスのユーザーとやりとりすることができます。これが分散型と言われる所以で、単一の運営者によって単一のURLで公開されるような、Twitterなどの他サービスとは根本的に異なっています。\nインスタンスによって主な話題のテーマやユーザー層、言語などは異なり、自分にあったインスタンスを探すのも楽しみのひとつです(もちろん自分のインスタンスを作るのも一興です)。\n--- Misskey Hub\nMisskeyのGitHub Misskey 機能 ノート リアクション タイムライン MFM カスタム絵文字 ドライブ デッキ チャート オンラインステータス 共有フォーム 広告 スレッドミュート ワードミュート ミュートとブロック プラグイン アンテナ クリップ お気に入り フォロー ページ テーマ ウィジェット 参考 Misskey Hub ","link":"https://ryuzu2048.github.io/post/14/","section":"post","tags":null,"title":"【Misskey】備忘録"},{"body":"今日した作業 【Misskey】備忘録 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230227/","section":"daily","tags":null,"title":"2023年02月27日（月）"},{"body":"","link":"https://ryuzu2048.github.io/categories/misskey/","section":"categories","tags":null,"title":"Misskey"},{"body":"","link":"https://ryuzu2048.github.io/categories/%E5%82%99%E5%BF%98%E9%8C%B2/","section":"categories","tags":null,"title":"備忘録"},{"body":"なんとなく使用しているコマンド『sfc /scannow』について調べなおす。\n説明 Scans and verifies the integrity of all protected system files and replaces incorrect versions with correct versions. If this command discovers that a protected file has been overwritten, it retrieves the correct version of the file from the systemroot\\ folder, and then replaces the incorrect file.\n--- sfc\n権限 Administrators group sfcコマンドをPowerShell上で実行 1PS C:\\\u0026gt; sfc 2 3Microsoft (R) Windows (R) Resource Checker Version 6.0 4Copyright (C) Microsoft Corporation. All rights reserved. 5 6すべての保護されたシステム ファイルの整合性をスキャンして、間違ったバージョンを 7正しい Microsoft バージョンに置換します。 8 9SFC [/SCANNOW] [/VERIFYONLY] [/SCANFILE=\u0026lt;ファイル\u0026gt;] [/VERIFYFILE=\u0026lt;ファイル\u0026gt;] 10 [/OFFWINDIR=\u0026lt;オフライン Windows ディレクトリ\u0026gt; /OFFBOOTDIR=\u0026lt;オフライン起動ディレクトリ\u0026gt; [/OFFLOGFILE=\u0026lt;ログ ファイルのパス\u0026gt;]] 11 12/SCANNOW すべての保護されたシステム ファイルの整合性をスキャンして、 13 可能な場合には問題のあるファイルを修復します。 14/VERIFYONLY すべての保護されたシステム ファイルの整合性をスキャンします。 15 修復操作は実行されません。 16/SCANFILE 参照されたファイルの整合性をスキャンして、問題が識別された 17 場合はファイルを修復します。完全パス \u0026lt;ファイル\u0026gt; を指定します 18/VERIFYFILE \u0026lt;ファイル\u0026gt; で指定された完全パスを持つファイルの整合性を確認 19 します。修復操作は実行されません。 20/OFFBOOTDIR オフライン修復の場合は、オフライン起動ディレクトリの場所を指定します。 21/OFFWINDIR オフライン修復の場合は、オフライン Windows ディレクトリの場所を指定します。 22/OFFLOGFILE オフライン修復の場合は、オプションでログ ファイルのパスを指定してログを有効にします。 23 24例 25 26 sfc /SCANNOW 27 sfc /VERIFYFILE=c:\\windows\\system32\\kernel32.dll 28 sfc /SCANFILE=d:\\windows\\system32\\kernel32.dll /OFFBOOTDIR=d:\\ /OFFWINDIR=d:\\windows 29 sfc /SCANFILE=d:\\windows\\system32\\kernel32.dll /OFFBOOTDIR=d:\\ /OFFWINDIR=d:\\windows /OFFLOGFILE=c:\\log.txt 30 sfc /VERIFYONLY 実行ファイルの場所 %windir%\\System32\\sfc.exe ログの場所 %windir%\\Logs\\CBS\\CBS.log 結論 sfc /scannowを実行すると、%windir%\\System32\\sfc.exeが実行される。\nscannowオプションですべての保護されたシステムファイルの整合性をスキャンし、可能であれば、問題のあるファイルを修復する。\n参考 sfc Use the System File Checker tool to repair missing or corrupted system files ","link":"https://ryuzu2048.github.io/post/13/","section":"post","tags":null,"title":"『sfc /scannow』って何？"},{"body":"今日した作業 『sfc /scannow』って何？ ","link":"https://ryuzu2048.github.io/daily/2023/02/20230226/","section":"daily","tags":null,"title":"2023年02月26日（日）"},{"body":"今日した作業 LINEのBot資料探し ","link":"https://ryuzu2048.github.io/daily/2023/02/20230225/","section":"daily","tags":null,"title":"2023年02月25日（土）"},{"body":"回復ドライブとは PC でハードウェア障害などの大きな問題が発生した場合は、回復ドライブを使用して Windows 11 を再インストールできます。\n--- 回復ドライブを作成する\n作成方法 windows + Rキーを同時に押す。 ファイル名を指定して実行 1%windir%\\system32\\RecoveryDrive.exe ユーザーアカウント制御より信頼できると考えられるなら「はい」を押す。 「システムファイルを回復ドライブにバックアップします。」にチェックを入れる。 USBメモリを接続し選択する。\n※ このUSBメモリの中に入っているデータは削除される。 「作成」を押すと作成できる。 ","link":"https://ryuzu2048.github.io/post/12/","section":"post","tags":null,"title":"【Windows 11】回復ドライブ作成方法"},{"body":"今日した作業 【Windows 11】回復ドライブ作成方法 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230224/","section":"daily","tags":null,"title":"2023年02月24日（金）"},{"body":"今日した作業 Unity勉強 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230223/","section":"daily","tags":null,"title":"2023年02月23日（木）"},{"body":"Google Apps Scriptの公式ページ 日本語があるが日本語は、Cloud Translation APIを用いて翻訳されている。\nApps Script 始め方 1 : Google アカウントを作成する。 Google アカウントの作成\nGoogle アカウントの作成 2 : Google DriveのURL Google Driveを開く\nGoogle Drive 3 : Google Driveのマイドライブ上より Google Driveのマイドライブ上\n新規 Google スプレッドシート 空白のスプレッドシート 4 : Google スプレッドシートに移動してから Google スプレッドシート\n拡張機能 Apps Script 5 : どこに書くの？ Apps Script\n1function myFunction() { 2 3} 6 : スクリプト例 以下のスクリプトをコード.gsに書く。\n1function myFunction() { 2 console.log(\u0026#39;初めての実行\u0026#39;) 3} 7 : 実行と実行ログ 実行をクリック\n実行ログ hh:mm:ss お知らせ 実行開始 hh:mm:ss 情報 初めての実行 hh:mm:ss お知らせ 実行完了 ","link":"https://ryuzu2048.github.io/post/11/","section":"post","tags":null,"title":"【GAS】Google Apps Scriptの始め方"},{"body":"今日した作業 【GAS】Google Apps Scriptの始め方 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230222/","section":"daily","tags":null,"title":"2023年02月22日（水）"},{"body":"","link":"https://ryuzu2048.github.io/categories/gas/","section":"categories","tags":null,"title":"GAS"},{"body":"今日した作業 一部のリンクに 1target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; を追加した。\n","link":"https://ryuzu2048.github.io/daily/2023/02/20230221/","section":"daily","tags":null,"title":"2023年02月21日（火）"},{"body":"今日した作業 Dockerコンテナ勉強 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230220/","section":"daily","tags":null,"title":"2023年02月20日（月）"},{"body":"今日した作業 api作成 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230219/","section":"daily","tags":null,"title":"2023年02月19日（日）"},{"body":"Discordフォーラムとは フォーラムチャンネル\n結論 1const discordWebHookURL = \u0026#34;\u0026#34; 2var message1 = { 3 \u0026#34;thread_name\u0026#34;: \u0026#34;スレッドの名前をここに入力\u0026#34;, 4} 5var param1 = { 6 \u0026#34;method\u0026#34;: \u0026#34;POST\u0026#34;, 7 \u0026#34;headers\u0026#34;: { 8 \u0026#34;Content-type\u0026#34;: \u0026#34;application/json\u0026#34;, 9 \u0026#34;User-Agent\u0026#34;: \u0026#34;DiscordBot\u0026#34; 10 }, 11 \u0026#34;payload\u0026#34;: JSON.stringify(message1), 12 \u0026#34;muteHttpExceptions\u0026#34;: true 13} 14UrlFetchApp.fetch(discordWebHookURL, param1); 参考 DEVELOPER PORTAL - Webhook Resource - ","link":"https://ryuzu2048.github.io/post/10/","section":"post","tags":null,"title":"【GAS】Discord Webhookでフォーラムに新しい投稿をする方法"},{"body":"今日した作業 GASプログラミング JSON 【GAS】Discord Webhookでフォーラムに新しい投稿をする方法 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230218/","section":"daily","tags":null,"title":"2023年02月18日（土）"},{"body":"","link":"https://ryuzu2048.github.io/categories/discord/","section":"categories","tags":null,"title":"Discord"},{"body":"今日した作業 GASプログラミング form提携 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230217/","section":"daily","tags":null,"title":"2023年02月17日（金）"},{"body":"今日した作業 GASプログラミング Embed スプレッドシート ","link":"https://ryuzu2048.github.io/daily/2023/02/20230216/","section":"daily","tags":null,"title":"2023年02月16日（木）"},{"body":"今日した作業 GASプログラミング ","link":"https://ryuzu2048.github.io/daily/2023/02/20230215/","section":"daily","tags":null,"title":"2023年02月15日（水）"},{"body":"今日した作業 Discord Bot作成 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230214/","section":"daily","tags":null,"title":"2023年02月14日（火）"},{"body":"今日した作業 VS Code + Powershell + gcc + 日本語 = 文字化けする問題 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230213/","section":"daily","tags":null,"title":"2023年02月13日（月）"},{"body":"","link":"https://ryuzu2048.github.io/categories/c%E8%A8%80%E8%AA%9E/","section":"categories","tags":null,"title":"C言語"},{"body":"なんか文字化けした 1#include \u0026lt;stdio.h\u0026gt; 2 3int main(void) { 4 printf(\u0026#34;てすとだよ\\n\u0026#34;); 5 6 return 0; 7} 1PS C:\\\u0026gt; gcc .\\test001.c -o .\\test001.exe 2PS C:\\\u0026gt; .\\test001.exe 3縺ｦ縺吶→縺繧・ 当時の条件 プログラムの文字コードがUTF-8だった。 プログラムの改行コードがLFだった。 PowerShellを使用していた。 原因 PowerShellのデフォルト文字コードがUS-ASCIIだったから。 解決策 プログラムの文字コードをShift_JISに変更する。 gccのオプションを追加する。12 Invocation 1PS C:\\\u0026gt; gcc .\\test001.c -o .\\test001.exe -fexec-charset=\u0026#39;cp932\u0026#39; 別のコマンドラインを使用する。 特にcmdであれば以下のコマンドを打つことによりコマンドラインの文字コードをUTF-8に変更できる。 1chcp 65001 chcp コード ページ識別子 PowerShellの文字コードをUTF-8に変更する。（ベータを含むので余りおすすめできない） 以下のコマンドを打つ。about_Character_Encoding 1PS C:\\\u0026gt; $OutputEncoding.encodingName 2US-ASCII 1PS C:\\\u0026gt; $OutputEncoding = [System.Text.Encoding]::UTF8 2PS C:\\\u0026gt; $OutputEncoding.encodingName 3Unicode (UTF-8) コントロールパネル 地域 管理タブ システムロケールの変更 ベータ：ワールドワイド言語サポートでUnicode UTF-8を使用にチェック ","link":"https://ryuzu2048.github.io/post/9/","section":"post","tags":null,"title":"VS Code + PowerShell + gcc + 日本語 = 文字化けする問題"},{"body":"\nif文 使い方 1if (/*条件式1*/) { 2 //条件式1が真の時の処理 3} 4else if (/*条件式2*/) { 5 //条件式1が偽の時かつ条件式2が真の時の処理 6} 7else { 8 //条件式1が偽の時かつ条件式2が偽の時の処理 9} 論理演算子 \u0026amp;\u0026amp; 論理積 || 論理和 ! 論理否定 使い方 1if (/*条件式1*/ \u0026amp;\u0026amp; /*条件式2*/) { 2 //条件式1かつ条件式2が真の時の処理 3} 4else if (/*条件式3*/ || /*条件式4*/) { 5 //条件式1かつ条件式2が偽の時、かつ条件式3または条件式4が真の時の処理 6} 7else if (!(/*条件式5*/)) { 8 //条件式1かつ条件式2が偽の時、かつ条件式3または条件式4が偽の時、かつ条件式5が偽の時の処理 9} 10else { 11 //条件式1かつ条件式2が偽の時、かつ条件式3または条件式4が偽の時、かつ条件式5が真の時の処理 12} for文 使い方 1for (/*初期化*/, /*条件式*/, /*増減*/) { 2 /*処理*/ 3} 例 1#include \u0026lt;stdio.h\u0026gt; 2 3int main(void) { 4 int i; 5 6 for (i = 0; i \u0026lt; 5; i++) { 7 printf(\u0026#34;%d\\n\u0026#34;, i); 8 } 9 10 return 0; 11} 10 21 32 43 54 while文 使い方 1while (/*条件式*/) { 2 /*処理*/ 3} 例 1#include \u0026lt;stdio.h\u0026gt; 2 3int main(void) { 4 int i; 5 i = 0; 6 7 while (i \u0026lt; 5) { 8 printf(\u0026#34;%d\\n\u0026#34;, i); 9 i++; 10 } 11 12 return 0; 13} 10 21 32 43 54 無限ループ for文 1for (;;) { 2 /*処理*/ 3} while文 1while (1) { 2 /*処理*/ 3} 繰り返し文を中断する処理 break 繰り返し文を中断してループから抜け出す。\ncontinue 繰り返し分を中断してループの先頭に戻る。\n配列 使い方 1/*型 変数[要素数]*/ 2int int_array[2]; 3double double_array[5]; 例 1#include \u0026lt;stdio.h\u0026gt; 2 3int main(void) { 4 int a[5] = {-1, 3, 6, 8, 4}; 5 6 printf(\u0026#34;%d\\n\u0026#34;, a[2]); 7 8 a[2] = 15; 9 printf(\u0026#34;%d\\n\u0026#34;, a[2]); 10 11 return 0; 12} 16 215 関数 使い方 1/* 2型 関数名(引数...){ 3 処理 4 返り値 5} 6*/ 例 1#include \u0026lt;stdio.h\u0026gt; 2 3int add(int a, int b) { 4 return a + b; 5} 6 7int main(void) { 8 int one, two, sum; 9 one = 1; 10 two = 2; 11 12 sum = add(one, two); 13 14 printf(\u0026#34;%d\\n\u0026#34;, sum); 15 16 return 0; 17} 13 プロトタイプ宣言 1#include \u0026lt;stdio.h\u0026gt; 2 3/*プロトタイプ宣言*/ 4int add(int a, int b); 5 6int main(void) { 7 int one, two, sum; 8 one = 1; 9 two = 2; 10 11 sum = add(one, two); 12 13 printf(\u0026#34;%d\\n\u0026#34;, sum); 14 15 return 0; 16} 17 18int add(int a, int b) { 19 return a + b; 20} 13 ","link":"https://ryuzu2048.github.io/post/8/","section":"post","tags":null,"title":"【C言語】if文・for文・while文・無限ループ・配列・関数"},{"body":"今日した作業 【C言語】if文・for文・while文・無限ループ・配列・関数 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230212/","section":"daily","tags":null,"title":"2023年02月12日（日）"},{"body":"今日した作業 SwitchBot プラグミニの電力をGrafana Cloudで監視画面を作る ","link":"https://ryuzu2048.github.io/daily/2023/02/20230211/","section":"daily","tags":null,"title":"2023年02月11日（土）"},{"body":"方針 Raspberry Pi 4（以下「RPi4」という。）を使用してBluetooth Low Energy（以下「BLE」という。）を用いてSwitchBot プラグミニの電力を取得。 取得したデータをPrometheusで処理。 Prometheusで処理したデータをInfluxDBへ保存。 Grafana Cloudで表示する。 単語 Switch Bot プラグミニのできること 電力消費量 電流 電圧 遠隔制御 その他 Grafanaとは なんかかっこいいダッシュボード\n簡易的なものであれば必要ない。\nBLEとは 低電力等に特化した規格。\n今回使うものは、Plug Mini BLE open APIとして仕様が出ている。\n作成 RPi4のセットアップ\nRaspberry Pi Imagerを使用してRaspberry Pi OSをインストールする。 → Raspberry Pi OS\nRaspberry Pi Imagerを使用しないで直接インストールする。 → Operating system images\nPythonのセットアップ\nSwitch Bot プラグミニのBLE MACアドレスを取得する。\n自分でプログラムを作成してBLE MACアドレスを取得する。 Switch Bot公式アプリでBLE MACアドレスを取得する。 Prometheusをセットアップする。\nInfluxDBでデータベースを作成する。\nPythonでBLEスクレイピングをしデータを処理・送信する。\nprometheus/client_python influxdata/influxdb-client-python Grafana Cloudで確認する。\nGrafana Cloud documentation ","link":"https://ryuzu2048.github.io/post/7/","section":"post","tags":null,"title":"SwitchBot プラグミニの電力をGrafana Cloudで監視画面を作る"},{"body":"今日した作業 C言語の基本文法復習 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230210/","section":"daily","tags":null,"title":"2023年02月10日（金）"},{"body":"公式ページ Lua.org 公式ドキュメント Lua: documentation コメント 3.1 – Basic Functions 1-- コメント行 2 3--[[ 4 コメント1行目 5 コメント2行目 6--]] io.read io.read 1a = io.read() 2print(a) 1Hello World 2Hello World print print 1a = \u0026#39;Hello World\u0026#39; 2print(a) 1Hello World if 9 – The Complete Syntax of Lua 1a = \u0026#39;qwerty\u0026#39; 2 3-- aがqwertyのとき 4if a = \u0026#39;qwerty\u0026#39; then 5 print(a) 6-- aがasdfghのとき 7elseif a = \u0026#39;asdfgh\u0026#39; then 8 print(a) 9-- aがqwertyでもasdfghでもないとき 10else 11 print(a) 12end 1qwerty 論理演算子 3.4.5 – Logical Operators and 論理積 or 論理和 not 論理否定 for 3.3.5 – For Statement 1--[[ 2for 初期値,最大値,増減 3--]] 4for i = 1,3,1 do 5 print(i) 6end 11 22 33 ","link":"https://ryuzu2048.github.io/post/6/","section":"post","tags":["Lua言語"],"title":"【Lua言語】備忘録"},{"body":"今日した作業 【Lua言語】備忘録 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230209/","section":"daily","tags":null,"title":"2023年02月09日（木）"},{"body":"","link":"https://ryuzu2048.github.io/tags/lua%E8%A8%80%E8%AA%9E/","section":"tags","tags":null,"title":"Lua言語"},{"body":"","link":"https://ryuzu2048.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"今日した作業 robots.txtの追加\n内容は適当です。\n1User-agent: * 2Disallow: /categories/ 3Disallow: /tags/ 4Disallow: /search/ 5Disallow: /privacy-policy/ 6Sitemap: https://ryuzu2048.github.io/sitemap.xml robots.txtについて ","link":"https://ryuzu2048.github.io/daily/2023/02/20230208/","section":"daily","tags":null,"title":"2023年02月08日（水）"},{"body":"robots.txtとは クローラに対してファイルへのアクセス許可・不許可を示すもの。\nRobots Exclusion Protocol（REP）という規格で定められている。\nどこに作成するか 最上位ディレクトリ\n例）https://www.example.com/ → https://www.example.com/robots.txt 書き方を簡単に User-agent: クライアントのタイプを指定したもの\nDisallow: クローラによるクロールを禁止するもの\nAllow: クローラによるクロールを許可するもの\n注意 **User-agent:**は必須\n**disallow:とallow:**はどちらか必要\n参考 RFC 9309 Robots Exclusion Protocol About /robots.txt ","link":"https://ryuzu2048.github.io/post/5/","section":"post","tags":null,"title":"robots.txtについて"},{"body":"結論 2006-01-02T15:04:05Z\n-- date (github.com/Azure/go-autorest/autorest/date)\n参考 date (github.com/Azure/go-autorest/autorest/date) src/time/format.go RFC 3339 Date and Time on the Internet: Timestamp ","link":"https://ryuzu2048.github.io/post/4/","section":"post","tags":null,"title":"【Go】timeの2006-01-02T15:04:05Zについて"},{"body":"今日した作業 Go言語のdateの2006-01-02T15:04:05Zについて 日記のディレクトリ構造を変えた。 1/daily/年/月/年月日 AboutのタイトルをAbout Meに変えた。 （Last Updated : yyyy-mm-dd）を追加 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230207/","section":"daily","tags":null,"title":"2023年02月07日（火）"},{"body":"特定のページだけキャッシュを消したい。\nキャッシュの消去とハード再読み込み Empty Cache And Hard Reload forces the browser to go the network for all resources.\n-- Inspect network activity\n方法 1 デベロッパーツールを開く\nOpen Chrome DevTools\n2 リロードボタンを長押しした後に、キャッシュの消去とハード再読み込みを選択する。\n","link":"https://ryuzu2048.github.io/post/3/","section":"post","tags":null,"title":"【Google Chrome】キャッシュの消去とハード再読み込み"},{"body":"今日した作業 ブログの書き換え作業 カテゴリー追加 【Google Chrome】キャッシュの消去とハード再読み込み作成 ","link":"https://ryuzu2048.github.io/daily/2023/02/20230206/","section":"daily","tags":null,"title":"2023年02月06日（月）"},{"body":"紹介 睡眠不足で死んでいる人\n普段使用している言語 C C++ Python 興味のあること サーバー管理 ネットワーク 一言 ねむい\n","link":"https://ryuzu2048.github.io/about/","section":"","tags":null,"title":"About Me"},{"body":"結論 1hugo server --watch --buildDrafts --buildFuture --ignoreCache -p 1313 オプション説明 hugo server\n1--watch watch filesystem for changes and recreate as needed (default true) 2--buildDrafts include content marked as draft 3--buildFuture include content with publishdate in the future 4--ignoreCache ignores the cache directory 5--port int port on which the server will listen (default 1313) ","link":"https://ryuzu2048.github.io/post/2/","section":"post","tags":null,"title":"hugoserverコマンドメモ"},{"body":"初投稿です。\n睡眠に支障をきたさない程度に更新します。\n","link":"https://ryuzu2048.github.io/post/1/","section":"post","tags":null,"title":"おはよう世界"},{"body":"アナリティクス Googleアナリティクス 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を使用しています。このGoogleアナリティクスはデータの収集のためにCookieを使用しています。このデータは匿名で収集されており、個人を特定するものではありません。\nこの機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。この規約に関しての詳細はGoogleアナリティクスサービス利用規約のページやGoogleポリシーと規約のページをご覧ください。\n","link":"https://ryuzu2048.github.io/privacy-policy/","section":"","tags":null,"title":"プライバシーポリシー"},{"body":"","link":"https://ryuzu2048.github.io/series/","section":"series","tags":null,"title":"Series"}]